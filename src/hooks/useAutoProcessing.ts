import { useCallback, useEffect, useRef } from 'react';
import type { MutableRefObject } from 'react';
import type { AutomationSettings } from './useAutomationSettings';

interface UseAutoProcessingOptions {
  automationSettings: AutomationSettings;
  isAutomationLoading: boolean;
  activeSessionId: string | null;
  ocrText: string;
  optimizedText: string;
  optimizedPrompt: string;
  generatedImageUrl: string;
  isOptimizingText: boolean;
  isOptimizing: boolean;
  isGenerating: boolean;
  optimizeOcrText: () => Promise<void>;
  optimizePrompt: () => Promise<void>;
  triggerImageGeneration: (prompt: string) => boolean;
  saveGeneratedImageToDirectory: (directory: string) => Promise<void>;
  isRestoringSessionRef: MutableRefObject<boolean>;
}

export const useAutoProcessing = ({
  automationSettings,
  isAutomationLoading,
  activeSessionId,
  ocrText,
  optimizedText,
  optimizedPrompt,
  generatedImageUrl,
  isOptimizingText,
  isOptimizing,
  isGenerating,
  optimizeOcrText,
  optimizePrompt,
  triggerImageGeneration,
  saveGeneratedImageToDirectory,
  isRestoringSessionRef
}: UseAutoProcessingOptions) => {
  const lastAutoOptimizedOcrRef = useRef<string>('');
  const lastAutoPromptRef = useRef<string>('');
  const lastAutoGeneratedImageRef = useRef<string>('');
  const lastAutoSavedImageRef = useRef<string>('');
  const optimizeOcrTextRef = useRef<(() => Promise<void>) | null>(null);

  // Track optimizeOcrText function reference
  useEffect(() => {
    optimizeOcrTextRef.current = optimizeOcrText;
  }, [optimizeOcrText]);

  // Reset auto-processing refs
  const resetAutoProcessingRefs = useCallback(() => {
    lastAutoOptimizedOcrRef.current = '';
    lastAutoPromptRef.current = '';
    lastAutoGeneratedImageRef.current = '';
    lastAutoSavedImageRef.current = '';
  }, []);

  // Handle OCR complete - trigger auto-optimize if enabled
  const handleOcrCompleteForAutoProcessing = useCallback((details: { ocrText: string; sessionId: string }) => {
    // Auto-optimize: only for active session
    if (
      details.sessionId === activeSessionId &&
      automationSettings.autoOptimizeOcr &&
      details.ocrText.trim() &&
      !isRestoringSessionRef.current
    ) {
      lastAutoOptimizedOcrRef.current = details.ocrText;
      void optimizeOcrTextRef.current?.();
    }

    // Auto-generate prompt: reset ref to allow auto-generation
    if (
      details.sessionId === activeSessionId &&
      automationSettings.autoGeneratePrompt &&
      details.ocrText.trim() &&
      !isRestoringSessionRef.current
    ) {
      lastAutoPromptRef.current = '';
    }
  }, [activeSessionId, automationSettings.autoOptimizeOcr, automationSettings.autoGeneratePrompt, isRestoringSessionRef]);

  // Auto-optimize when setting is enabled and OCR text exists without optimization
  useEffect(() => {
    if (isAutomationLoading) {
      return;
    }

    if (!automationSettings.autoOptimizeOcr || !ocrText.trim() || isRestoringSessionRef.current || isOptimizingText) {
      return;
    }

    // Only auto-optimize if there's no optimized text yet
    if (optimizedText.trim()) {
      return;
    }

    if (lastAutoOptimizedOcrRef.current === ocrText) {
      return;
    }

    lastAutoOptimizedOcrRef.current = ocrText;
    void optimizeOcrText();
  }, [automationSettings.autoOptimizeOcr, isAutomationLoading, isOptimizingText, ocrText, optimizedText, optimizeOcrText, isRestoringSessionRef]);

  // Auto-generate prompt
  useEffect(() => {
    if (isAutomationLoading) {
      return;
    }

    if (!automationSettings.autoGeneratePrompt || !ocrText.trim() || isRestoringSessionRef.current || isOptimizing) {
      return;
    }

    if (lastAutoPromptRef.current === ocrText) {
      return;
    }

    lastAutoPromptRef.current = ocrText;
    void optimizePrompt();
  }, [automationSettings.autoGeneratePrompt, isAutomationLoading, isOptimizing, ocrText, optimizePrompt, isRestoringSessionRef]);

  // Auto-generate image
  useEffect(() => {
    if (isAutomationLoading) {
      return;
    }

    if (!automationSettings.autoGenerateImage || !optimizedPrompt.trim() || isRestoringSessionRef.current || isGenerating) {
      return;
    }

    if (!activeSessionId) {
      return;
    }

    if (lastAutoGeneratedImageRef.current === optimizedPrompt) {
      return;
    }

    if (triggerImageGeneration(optimizedPrompt)) {
      lastAutoGeneratedImageRef.current = optimizedPrompt;
    }
  }, [activeSessionId, automationSettings.autoGenerateImage, isAutomationLoading, isGenerating, optimizedPrompt, triggerImageGeneration, isRestoringSessionRef]);

  // Auto-save image
  useEffect(() => {
    if (isAutomationLoading) {
      return;
    }

    if (
      !automationSettings.autoSaveImage ||
      !automationSettings.autoSaveDirectory.trim() ||
      !generatedImageUrl ||
      isRestoringSessionRef.current
    ) {
      return;
    }

    if (lastAutoSavedImageRef.current === generatedImageUrl) {
      return;
    }

    lastAutoSavedImageRef.current = generatedImageUrl;
    void saveGeneratedImageToDirectory(automationSettings.autoSaveDirectory).catch(() => {
      // Error already surfaced via generation status; no-op here.
    });
  }, [
    automationSettings.autoSaveDirectory,
    automationSettings.autoSaveImage,
    generatedImageUrl,
    isAutomationLoading,
    saveGeneratedImageToDirectory,
    isRestoringSessionRef
  ]);

  return {
    resetAutoProcessingRefs,
    handleOcrCompleteForAutoProcessing,
    optimizeOcrTextRef
  };
};

